// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  emailVerified   DateTime?
  image           String
  accounts        Account[]
  sessions        Session[]
  companies       Company[]
  members          Member[]
  createdAt       DateTime       @default(now())
}

model Company {
  id              String         @id @default(cuid())
  name            String
  email           String     
  owner           User           @relation(fields: [ownerId], references: [id])
  ownerId         String
  userId          String
  teams            Team[]
  topups           Topup[]
  createdAt       DateTime       @default(now())
}

model Team {
  id              String         @id @default(cuid())
  name            String
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String
  members          Member[]
  createdAt       DateTime       @default(now())
}

model Member {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  team            Team           @relation(fields: [teamId], references: [id])
  teamId          String
  designation     String
  cashDeposits     CashDeposit[]
  createdAt       DateTime       @default(now())
}

model Topup {
  id              String         @id @default(cuid())
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String
  date            DateTime
  amount          Int
  createdAt       DateTime       @default(now())
}

model CashDeposit {
  id              String         @id @default(cuid())
  member          Member         @relation(fields: [memberId], references: [id])
  memberId        String
  date            DateTime
  amount          Int
  createdAt       DateTime       @default(now())
}